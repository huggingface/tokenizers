/*! \file */
/*******************************************
 *                                         *
 *  File auto-generated by `::safer_ffi`.  *
 *                                         *
 *  Do not manually edit this file.        *
 *                                         *
 *******************************************/

#ifndef __RUST_SAFER-FFI-TOKENIZERS__
#define __RUST_SAFER-FFI-TOKENIZERS__

#ifdef __cplusplus
extern "C" {
#endif

typedef struct FFITokenizer FFITokenizer_t;

FFITokenizer_t * tokenizer_new (void);

void tokenizer_drop (
    FFITokenizer_t * ptr);


#include <stddef.h>
#include <stdint.h>

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct {

    uint32_t * ptr;

    size_t len;

    size_t cap;

} Vec_uint32_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct {

    uint32_t * * ptr;

    size_t len;

    size_t cap;

} Vec_uint32_ptr_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct {

    uint8_t * ptr;

    size_t len;

    size_t cap;

} Vec_uint8_t;

/** \brief
 *  Same as [`Vec<T>`][`rust::Vec`], but with guaranteed `#[repr(C)]` layout
 */
typedef struct {

    Vec_uint8_t * ptr;

    size_t len;

    size_t cap;

} Vec_Vec_uint8_t;

typedef struct {

    Vec_uint32_t ids;

    Vec_uint32_t type_ids;

    Vec_uint32_ptr_t foo;

    Vec_Vec_uint8_t tokens;

    Vec_uint32_ptr_t words;

    Vec_uint32_t special_token_mask;

    Vec_uint32_t attention_mask;

} FFIEncoding_t;

void encoding_drop (
    FFIEncoding_t * ptr);


#ifdef __cplusplus
} /* extern "C" */
#endif

#endif /* __RUST_SAFER-FFI-TOKENIZERS__ */
