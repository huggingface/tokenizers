plugins {
    //TODO: make type library and move App to examples
    id 'java-library'
    id 'maven-publish'
    id "com.diffplug.spotless" version "6.0.0"
    id "de.undercouch.download" version "4.1.2"
    id "me.champeau.jmh" version "0.6.6" // benchmarking: $ gradle jmh
}

group 'co.huggingface'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

def moveTarget(String os) {
    def buildDir = "${project.buildDir}/classes/java/main/${os}-x86-64"
    file(buildDir).mkdirs()

    def targetDir = "${project.projectDir}/src/main/rust/target/release"
    def tree = fileTree(targetDir)

    tree.include("libsafer_ffi_tokenizers.*")

    copy {
        from tree.files
        into buildDir
    }
}

task buildRust {
    inputs.dir('src/main/rust')
    outputs.dir('src/main/rust/target')
    doLast {
        exec { commandLine 'bash', 'build.sh' }

        def currentOs = System.properties['os.name']

        if (currentOs.startsWith("Mac")) {
            moveTarget("darwin")
        } else if (currentOs.startsWith("Linux")) {
            moveTarget("linux")
        } else {
            throw new IllegalStateException("Unsupported os: " + currentOs)
        }
    }
}

compileJava.dependsOn buildRust

jmh {
    download {
        src 'https://norvig.com/big.txt'
        dest 'src/jmh/resources'
        overwrite false
    }
}

clean.doFirst {
    delete "./src/main/rust/target"
}

spotless {
    format 'misc', {
        target '*.properties','*.gradle', '*.md', '.gitignore' // etc.
    }
    java {
        indentWithSpaces()
        removeUnusedImports()
    }
}

dependencies {
    implementation 'net.java.dev.jna:jna:5.10.0'
    jmh 'org.openjdk.jmh:jmh-core:1.33'
    jmh 'org.openjdk.jmh:jmh-generator-annprocess:1.33'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
              groupId = group
              artifactId = 'jvm-tokenizers'
              version = version

              from components.java
        }
    }
}

test {
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
}
